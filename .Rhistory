# move everything to output folder
file.rename(from = paste0(report_template_folder,"/",outfile),
to =  paste0(outputfolder,"/",outfile))
if (dir.exists(paste0(outputfolder,"/",gsub(".qmd","",dashboard_template),"_","files"))){
unlink(paste0(outputfolder,"/",gsub(".qmd","",dashboard_template),"_","files/"),recursive = TRUE)
}
file.rename(from = paste0(report_template_folder,"/",gsub(".qmd","",dashboard_template),"_","files"),
to = paste0(outputfolder,"/",gsub(".qmd","",dashboard_template),"_","files"))
# 8) Open in browser ------------------------------------------------------------
if (open_browser && interactive()) utils::browseURL(paste0(outputfolder,"/",outfile))
head(batch_main)
head(batch_data$batch_main)
outfile <- "test_dashboard_output.html"
message("\nRendering dashboard to: ", outfile)
quarto::quarto_render(
input = dash_file,
execute_dir = "output",
output_file = outfile
)
# move everything to output folder
file.rename(from = paste0(report_template_folder,"/",outfile),
to =  paste0(outputfolder,"/",outfile))
if (dir.exists(paste0(outputfolder,"/",gsub(".qmd","",dashboard_template),"_","files"))){
unlink(paste0(outputfolder,"/",gsub(".qmd","",dashboard_template),"_","files/"),recursive = TRUE)
}
file.rename(from = paste0(report_template_folder,"/",gsub(".qmd","",dashboard_template),"_","files"),
to = paste0(outputfolder,"/",gsub(".qmd","",dashboard_template),"_","files"))
# 8) Open in browser ------------------------------------------------------------
if (open_browser && interactive()) utils::browseURL(paste0(outputfolder,"/",outfile))
?quarto_render
install.packages(c("usethis","gert","gitcreds"))
usethis::create_github_token()
gitcreds::gitcreds_set()
usethis::create_from_github("RiaMoothilal/IGCAnalyticsOutput",
destdir = "~/projects")   # choose your folder
usethis::create_from_github("RiaMoothilal/IGCAnalyticsOutput",
destdir = "C:/Users/ria/OneDrive/Documents/GDrive/IGC_File_Analytics/GitRepo")   # choose your folder
# run_one_dashboard.R
# Renders ONE dashboard (Quarto .qmd or flexdashboard .Rmd) using your existing pipeline
# --- CONFIG YOU CHANGE ---------------------------------------------------------
setwd("~/GDrive/IGC_File_Analytics/Version2Claude")
# main_igc_file   <- "data/igc_files/250328_Various/2025-03-28-XFH-000-01 Roland.igc"
# batch_folder    <- "data/igc_files/250328_Various"
main_igc_file   <- "data/igc_files/250830_Various/2025-08-30-XCT-BTO-11.igc"
batch_folder    <- "data/igc_files/250830_Various"
# Point this to your NEW dashboard template:
#   - Quarto:   e.g. "reports/templates/flight_dashboard.qmd"
#   - Flexdash: e.g. "reports/templates/flight_dashboard.Rmd"
# dashboard_filename <- "reports/templates/individual_vs_other_pilots_04_0.qmd"
report_template_folder <- "../GitRepo/reports/IGCAnalyticsOutput"
outputfolder <- "output"
dashboard_template <- "dashboard_individual_vs_other_pilots_01.qmd"
open_browser   <- TRUE
# ------------------------------------------------------------------------------
message("\n=== AirSchool Flight Dashboard Generator ===\n")
# 1) Locate the dashboard file --------------------------------------------------
dash_file <- paste0(report_template_folder,"/",dashboard_template)
if (file.exists(dash_file)) {
message("✅ Using dashboard template: ", dash_file)
} else
message ("❌ Dashboard template not found: ", dash_file)
# run_one_dashboard.R
# Renders ONE dashboard (Quarto .qmd or flexdashboard .Rmd) using your existing pipeline
# --- CONFIG YOU CHANGE ---------------------------------------------------------
setwd("~/GDrive/IGC_File_Analytics/Version2Claude")
# main_igc_file   <- "data/igc_files/250328_Various/2025-03-28-XFH-000-01 Roland.igc"
# batch_folder    <- "data/igc_files/250328_Various"
main_igc_file   <- "data/igc_files/250830_Various/2025-08-30-XCT-BTO-11.igc"
batch_folder    <- "data/igc_files/250830_Various"
# Point this to your NEW dashboard template:
#   - Quarto:   e.g. "reports/templates/flight_dashboard.qmd"
#   - Flexdash: e.g. "reports/templates/flight_dashboard.Rmd"
# dashboard_filename <- "reports/templates/individual_vs_other_pilots_04_0.qmd"
report_template_folder <- "~/GDrive/IGC_File_Analytics/GitRepo/reports/IGCAnalyticsOutput"
outputfolder <- "output"
dashboard_template <- "dashboard_individual_vs_other_pilots_01.qmd"
open_browser   <- TRUE
# ------------------------------------------------------------------------------
message("\n=== AirSchool Flight Dashboard Generator ===\n")
# 1) Locate the dashboard file --------------------------------------------------
dash_file <- paste0(report_template_folder,"/",dashboard_template)
if (file.exists(dash_file)) {
message("✅ Using dashboard template: ", dash_file)
} else
message ("❌ Dashboard template not found: ", dash_file)
# run_one_dashboard.R
# Renders ONE dashboard (Quarto .qmd or flexdashboard .Rmd) using your existing pipeline
# --- CONFIG YOU CHANGE ---------------------------------------------------------
setwd("~/GDrive/IGC_File_Analytics/Version2Claude")
# main_igc_file   <- "data/igc_files/250328_Various/2025-03-28-XFH-000-01 Roland.igc"
# batch_folder    <- "data/igc_files/250328_Various"
main_igc_file   <- "data/igc_files/250830_Various/2025-08-30-XCT-BTO-11.igc"
batch_folder    <- "data/igc_files/250830_Various"
# Point this to your NEW dashboard template:
#   - Quarto:   e.g. "reports/templates/flight_dashboard.qmd"
#   - Flexdash: e.g. "reports/templates/flight_dashboard.Rmd"
# dashboard_filename <- "reports/templates/individual_vs_other_pilots_04_0.qmd"
report_template_folder <- "~/GDrive/IGC_File_Analytics/GitRepo/IGCAnalyticsOutput"
outputfolder <- "output"
dashboard_template <- "dashboard_individual_vs_other_pilots_01.qmd"
open_browser   <- TRUE
# ------------------------------------------------------------------------------
message("\n=== AirSchool Flight Dashboard Generator ===\n")
# 1) Locate the dashboard file --------------------------------------------------
dash_file <- paste0(report_template_folder,"/",dashboard_template)
if (file.exists(dash_file)) {
message("✅ Using dashboard template: ", dash_file)
} else
message ("❌ Dashboard template not found: ", dash_file)
quarto::quarto_render(input = dash_file)
quarto::quarto_render(input = dash_file)
dash_file
quarto::quarto_render(
input = dash_file,
output_file = "index.html",                  # filename only (no path)
quarto_args = c("--output-dir", "docs")
)
# run_one_dashboard.R
# Renders ONE dashboard (Quarto .qmd or flexdashboard .Rmd) using your existing pipeline
# --- CONFIG YOU CHANGE ---------------------------------------------------------
setwd("~/GDrive/IGC_File_Analytics/Version2Claude")
# main_igc_file   <- "data/igc_files/250328_Various/2025-03-28-XFH-000-01 Roland.igc"
# batch_folder    <- "data/igc_files/250328_Various"
main_igc_file   <- "data/igc_files/250830_Various/2025-08-30-XCT-BTO-11.igc"
batch_folder    <- "data/igc_files/250830_Various"
# Point this to your NEW dashboard template:
#   - Quarto:   e.g. "reports/templates/flight_dashboard.qmd"
#   - Flexdash: e.g. "reports/templates/flight_dashboard.Rmd"
# dashboard_filename <- "reports/templates/individual_vs_other_pilots_04_0.qmd"
report_template_folder <- "~/GDrive/IGC_File_Analytics/GitRepo/IGCAnalyticsOutput"
dashboard_template <- "index.qmd"
open_browser   <- TRUE
# ------------------------------------------------------------------------------
message("\n=== AirSchool Flight Dashboard Generator ===\n")
# 1) Locate the dashboard file --------------------------------------------------
dash_file <- paste0(report_template_folder,"/",dashboard_template)
if (file.exists(dash_file)) {
message("✅ Using dashboard template: ", dash_file)
} else
message ("❌ Dashboard template not found: ", dash_file)
quarto::quarto_render(
input = dash_file,
output_file = "index.html",                  # filename only (no path)
quarto_args = c("--output-dir", "docs") # additional arguments passed to the CLI
)
thermal_summary %>%
arrange(segment_id) %>%
mutate(thermal_number = row_number()) %>%
select(thermal_number, gps_turning_start_alt, gps_turning_end_alt,
thermal_gain_m, avg_climb_rate_mps, num_circles,
centering_pct, avg_circle_duration, circle_duration_std_dev, climb_delay_sec) %>%
mutate(
gps_turning_start_alt = round(gps_turning_start_alt),
gps_turning_end_alt = round(gps_turning_end_alt),
thermal_gain_m = round(thermal_gain_m),
avg_climb_rate_mps = round(avg_climb_rate_mps, 1),
num_circles = round(num_circles, 1),
centering_pct = round(centering_pct)
)
View(thermal_summary %>%
arrange(segment_id) %>%
mutate(thermal_number = row_number()) %>%
select(thermal_number, gps_turning_start_alt, gps_turning_end_alt,
thermal_gain_m, avg_climb_rate_mps, num_circles,
centering_pct, avg_circle_duration, circle_duration_std_dev, climb_delay_sec) %>%
mutate(
gps_turning_start_alt = round(gps_turning_start_alt),
gps_turning_end_alt = round(gps_turning_end_alt),
thermal_gain_m = round(thermal_gain_m),
avg_climb_rate_mps = round(avg_climb_rate_mps, 1),
num_circles = round(num_circles, 1),
centering_pct = round(centering_pct)
))
clean_metric_names(colnames(display_thermals))
quarto::quarto_render(
input = dash_file,
output_file = "index.html",                  # filename only (no path)
quarto_args = c("--output-dir", "docs") # additional arguments passed to the CLI
)
if (exists("thermal_summary") && !is.null(thermal_summary) && nrow(thermal_summary) > 0) {
display_thermals <- thermal_summary %>%
arrange(segment_id) %>%
mutate(thermal_number = row_number()) %>%
select(thermal_number, gps_turning_start_alt, gps_turning_end_alt,
thermal_gain_m, avg_climb_rate_mps, num_circles,
centering_pct, avg_circle_duration, circle_duration_std_dev, climb_delay_sec) %>%
mutate(
gps_turning_start_alt = round(gps_turning_start_alt),
gps_turning_end_alt = round(gps_turning_end_alt),
thermal_gain_m = round(thermal_gain_m),
avg_climb_rate_mps = round(avg_climb_rate_mps, 1),
num_circles = round(num_circles, 1),
centering_pct = round(centering_pct),
circle_duration_sec = round(avg_circle_duration),
circle_consistensy_sec = round(circle_duration_std_dev)
) %>%
select(-c(avg_circle_duration,circle_duration_std_dev))
colnames(display_thermals) <- clean_metric_names(colnames(display_thermals))
# Create DT table with better dashboard integration
DT::datatable(
display_thermals,
options = list(
scrollX = TRUE,              # Enable horizontal scrolling
autoWidth = TRUE,            # Auto-adjust column widths
pageLength = 15,             # Reasonable page length
lengthMenu = c(10, 15, 25, 50),  # Page length options
dom = 'lBfrtip',            # Layout: length, buttons, filter, table, info, pagination
buttons = c('copy', 'csv'),  # Export buttons
fixedHeader = list(          # More specific fixed header config
header = TRUE,
headerOffset = 0
),
columnDefs = list(
list(
className = 'dt-center',
targets = c(0, 2, 3, 4, 5, 6, 7, 8, 9, 10)  # Center align numeric columns
),
list(
width = '60px',
targets = 0  # Thermal Number column width
)
),
initComplete = DT::JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#f8f9fa', 'color': '#495057'});",
"}"
)
),
extensions = c('Buttons', 'FixedHeader'),  # Required extensions
class = 'stripe hover row-border order-column',  # Clean, minimal styling
rownames = FALSE,
filter = list(position = 'top', clear = FALSE),  # Column filters
style = 'bootstrap4'  # Use Bootstrap 4 styling to match dashboard
) %>%
# Subtle highlighting for thermal number column
DT::formatStyle(
columns = 'Thermal Number',
backgroundColor = '#f8f9fa',
fontWeight = 'bold',
border = '1px solid #dee2e6'
) %>%
# Very subtle highlighting for centering performance
DT::formatStyle(
columns = 'Centering Pct',
backgroundColor = DT::styleInterval(
cuts = c(40, 70),
values = c('#fff5f5', '#fffbf0', '#f0fff4')  # Very subtle tints
),
fontWeight = DT::styleInterval(
cuts = c(40, 70),
values = c('normal', 'normal', 'bold')  # Bold for good performance only
)
) %>%
# Format numeric columns with consistent decimal places
DT::formatRound(
columns = c('Avg Climb Rate', 'Circle Duration Sec', 'Circle Consistency Sec'),
digits = 1
) %>%
DT::formatRound(
columns = c('Num Circles'),
digits = 1
)
} else {
cat("No valid thermals detected")
}
if (exists("thermal_summary") && !is.null(thermal_summary) && nrow(thermal_summary) > 0) {
display_thermals <- thermal_summary %>%
arrange(segment_id) %>%
mutate(thermal_number = row_number()) %>%
select(thermal_number, gps_turning_start_alt, gps_turning_end_alt,
thermal_gain_m, avg_climb_rate_mps, num_circles,
centering_pct, avg_circle_duration, circle_duration_std_dev, climb_delay_sec) %>%
mutate(
gps_turning_start_alt = round(gps_turning_start_alt),
gps_turning_end_alt = round(gps_turning_end_alt),
thermal_gain_m = round(thermal_gain_m),
avg_climb_rate_mps = round(avg_climb_rate_mps, 1),
num_circles = round(num_circles, 1),
centering_pct = round(centering_pct),
circle_duration_sec = round(avg_circle_duration),
circle_consistency_sec = round(circle_duration_std_dev)
) %>%
select(-c(avg_circle_duration,circle_duration_std_dev))
colnames(display_thermals) <- clean_metric_names(colnames(display_thermals))
# Create DT table with better dashboard integration
DT::datatable(
display_thermals,
options = list(
scrollX = TRUE,              # Enable horizontal scrolling
autoWidth = TRUE,            # Auto-adjust column widths
pageLength = 15,             # Reasonable page length
lengthMenu = c(10, 15, 25, 50),  # Page length options
dom = 'lBfrtip',            # Layout: length, buttons, filter, table, info, pagination
buttons = c('copy', 'csv'),  # Export buttons
fixedHeader = list(          # More specific fixed header config
header = TRUE,
headerOffset = 0
),
columnDefs = list(
list(
className = 'dt-center',
targets = c(0, 2, 3, 4, 5, 6, 7, 8, 9, 10)  # Center align numeric columns
),
list(
width = '60px',
targets = 0  # Thermal Number column width
)
),
initComplete = DT::JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#f8f9fa', 'color': '#495057'});",
"}"
)
),
extensions = c('Buttons', 'FixedHeader'),  # Required extensions
class = 'stripe hover row-border order-column',  # Clean, minimal styling
rownames = FALSE,
filter = list(position = 'top', clear = FALSE),  # Column filters
style = 'bootstrap4'  # Use Bootstrap 4 styling to match dashboard
) %>%
# Subtle highlighting for thermal number column
DT::formatStyle(
columns = 'Thermal Number',
backgroundColor = '#f8f9fa',
fontWeight = 'bold',
border = '1px solid #dee2e6'
) %>%
# Very subtle highlighting for centering performance
DT::formatStyle(
columns = 'Centering Pct',
backgroundColor = DT::styleInterval(
cuts = c(40, 70),
values = c('#fff5f5', '#fffbf0', '#f0fff4')  # Very subtle tints
),
fontWeight = DT::styleInterval(
cuts = c(40, 70),
values = c('normal', 'normal', 'bold')  # Bold for good performance only
)
) %>%
# Format numeric columns with consistent decimal places
DT::formatRound(
columns = c('Avg Climb Rate', 'Circle Duration Sec', 'Circle Consistency Sec'),
digits = 1
) %>%
DT::formatRound(
columns = c('Num Circles'),
digits = 1
)
} else {
cat("No valid thermals detected")
}
if (exists("thermal_summary") && !is.null(thermal_summary) && nrow(thermal_summary) > 0) {
display_thermals <- thermal_summary %>%
arrange(segment_id) %>%
mutate(thermal_number = row_number()) %>%
select(thermal_number, gps_turning_start_alt, gps_turning_end_alt,
thermal_gain_m, avg_climb_rate_mps, num_circles,
centering_pct, avg_circle_duration, circle_duration_std_dev, climb_delay_sec) %>%
mutate(
gps_turning_start_alt = round(gps_turning_start_alt),
gps_turning_end_alt = round(gps_turning_end_alt),
thermal_gain_m = round(thermal_gain_m),
avg_climb_rate_mps = round(avg_climb_rate_mps, 1),
num_circles = round(num_circles, 1),
centering_pct = round(centering_pct),
circle_duration_sec = round(avg_circle_duration),
circle_consistency_sec = round(circle_duration_std_dev)
) %>%
select(-c(avg_circle_duration,circle_duration_std_dev))
colnames(display_thermals) <- clean_metric_names(colnames(display_thermals))
# Create DT table with better dashboard integration
DT::datatable(
display_thermals,
options = list(
scrollX = TRUE,              # Enable horizontal scrolling
autoWidth = TRUE,            # Auto-adjust column widths
pageLength = 15,             # Reasonable page length
lengthMenu = c(10, 15, 25, 50),  # Page length options
dom = 'lBfrtip',            # Layout: length, buttons, filter, table, info, pagination
buttons = c('copy', 'csv'),  # Export buttons
fixedHeader = list(          # More specific fixed header config
header = TRUE,
headerOffset = 0
),
columnDefs = list(
list(
className = 'dt-center',
targets = c(0, 2, 3, 4, 5, 6, 7, 8, 9, 10)  # Center align numeric columns
),
list(
width = '60px',
targets = 0  # Thermal Number column width
)
),
initComplete = DT::JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#f8f9fa', 'color': '#495057'});",
"}"
)
),
extensions = c('Buttons', 'FixedHeader'),  # Required extensions
class = 'stripe hover row-border order-column',  # Clean, minimal styling
rownames = FALSE,
filter = list(position = 'top', clear = FALSE),  # Column filters
style = 'bootstrap4'  # Use Bootstrap 4 styling to match dashboard
) %>%
# Subtle highlighting for thermal number column
DT::formatStyle(
columns = 'Thermal Number',
backgroundColor = '#f8f9fa',
fontWeight = 'bold',
border = '1px solid #dee2e6'
) %>%
# Very subtle highlighting for centering performance
DT::formatStyle(
columns = 'Centering Pct',
backgroundColor = DT::styleInterval(
cuts = c(40, 70),
values = c('#fff5f5', '#fffbf0', '#f0fff4')  # Very subtle tints
),
fontWeight = DT::styleInterval(
cuts = c(40, 70),
values = c('normal', 'normal', 'bold')  # Bold for good performance only
)
)
} else {
cat("No valid thermals detected")
}
quarto::quarto_render(
input = dash_file,
output_file = "index.html",                  # filename only (no path)
quarto_args = c("--output-dir", "docs") # additional arguments passed to the CLI
)
rlang::last_trace()
quarto::quarto_render(
input = dash_file,
output_file = "index.html",                  # filename only (no path)
quarto_args = c("--output-dir", "docs") # additional arguments passed to the CLI
)
fx_plot_map(flight_data)
gert::git_add("docs")
report_template_folder
setwd(report_template_folder)
gert::git_add("docs")
gert::git_commit("Add dashboard output")
gert::git_config_set("user.name",  "RiaMoothilal",  global = TRUE)
gert::git_config_set("user.name",  "RiaMoothilal" , scope = "global")
?git_config_set
gert::git_config_global_set("user.name",  "RiaMoothilal")
gert::git_config_global_set("user.email", "ria@airschool.co.za")
gert::git_add("docs")
gert::git_commit("Add dashboard output")
gert::git_push()
pilot_name
flight_date
location
# --- helpers to make clean URLs / folders
slugify <- function(x) {
x |>
tolower() |>
gsub("[^a-z0-9]+", "-", .) |>
gsub("(^-|-$)", "", .)
}
pilot_slug  <- slugify(pilot_name)
loc_slug    <- slugify(location)
flight_key  <- paste0(flight_date, "-", loc_slug)
slugify(pilot_name)
pilot_name
flight_date
location
slugify(pilot_name)
# --- helpers to make clean URLs / folders
slugify <- function(x) {
x <- tolower(x)
x <- gsub("[^a-z0-9]+", "-", x)
x <- gsub("(^-|-$)", "", x)
return(x)
}
slugify(pilot_name)
pilot_slug  <- slugify(pilot_name)
loc_slug    <- slugify(location)
flight_key  <- paste0(flight_date, "-", loc_slug)
loc_slug
flight_key
report_template_folder
repo_dir <- report_template_folder   # <-- adjust
file.path(repo_dir, "docs", pilot_slug, flight_key)
file.path(out_dir, "data")
# Where the public HTML will live (and get committed)
out_dir <- file.path(repo_dir, "docs", pilot_slug, flight_key)
dir.create(out_dir, recursive = TRUE, showWarnings = FALSE)
file.path(tempdir(), paste0("qmd-run-", as.integer(Sys.time())))
tmp_root <- file.path(tempdir(), paste0("qmd-run-", as.integer(Sys.time())))
dir.create(file.path(tmp_root, "output"), recursive = TRUE, showWarnings = FALSE)
file.path(tmp_root, "output", "processed_objects.RData")
tmp_root
save.image(file.path(tmp_root, "output", "processed_objects.RData"))
qmd_path <- file.path(repo_dir, "index.qmd")  # adjust if your qmd is elsewhere
qmd_path
quarto::quarto_render(
input         = qmd_path,
output_file   = "index.html",                    # so URL ends with .../<folder>/
execute       = TRUE,
execute_dir   = tmp_root,                        # << key: your qmd's load() resolves here
quarto_args   = c("--output-dir", out_dir)       # write HTML to the public folder
)
out_dir
unlink(tmp_root, recursive = TRUE, force = TRUE)
# ---- 4) Commit and push the new report (HTML + index_files) ----
old <- setwd(repo_dir); on.exit(setwd(old), add = TRUE)
gert::git_add(out_dir)
git config --system core.longpaths true
